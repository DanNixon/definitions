..  this comment preserved in the source code tree but
    not to be published in the manual documentation.


.. 2014-08-19,PRJ: removing from published manual by comment
   .. index::
       NXDL
       NeXus Definition Language

   The NeXus Definition Language NXDL
   -----------------------------

   ..  This might be just so much dirty laundry.  Consider removing it.

   This section contains a few brief notes about the history of NXDL
   and the motivations for its creation.

   Previously, the structure of NeXus data files was described using
   *Meta-DTD*, an XML format that provided a compact
   description. The terse format was not obvious to all and was difficult to
   machine-process. NXDL was conceived to be a simpler syntax than Meta-DTD.
   The switch to NXDL was not intended to change what was in the data files, just
   to provide an easier (and more generic) way of describing data files.

   The NeXus Design page lists the group classes from which a NeXus file is
   constructed. They provide the glossary of items that could, in principle, be stored
   in a standard-conforming NeXus file (other items may be inserted into the file if
   the author wishes, but they won't be part of the standard).
   When planning to include a particular piece of
   :index:`metadata`, consult the class definitions
   to find out what to call it. However, to assist those writing data analysis
   software, it is useful to provide more than a glossary; it is important to define
   the required contents of NeXus files that contain data from particular classes of
   neutron, x-ray, or muon instrument.

   As part of the NeXus standard, the NIAC identified a number of generic instruments
   that describe an appreciable number of existing instruments around the world.
   Although not identical in every detail, they share many common characteristics,
   and more importantly, they require sufficiently similar modes of data analysis,
   enough to make a standard description useful.
   Many of the application definitions were built from these instrument definitions
   using the NeXus Definition Language
   (:index:`NXDL`) format.

   Class definitions in NeXus prior to 2008 had been in the form of base classes and
   instrument definitions. All of these were in the same category. As the development
   of NeXus had been led mostly by scientists from neutron sources, this represented
   their typical situations.

   Both those new to NeXus and also those familiar saw the previous emphasis on
   instrument definitions as a deficiency that limited flexibility and possibly usage.
   The point was made that NeXus should attempt to describe better reduced data and
   also data for analysis since synchrotron instruments are rarely adhering to a fixed
   definition.

   The design of NeXus is moving towards an object-oriented approach where the base
   classes will be the objects and the application definitions will use the objects
   to specify the required components as fits some application. Here,
   *application* is
   very loosely defined to include:

   - specification of a scientific instrument (example: TOF-USANS at SNS)

   - specification of what is expected for a scientific technique (example:
     small-angle scattering data for common analysis programs)

   - specification of generic data acquisition stream (example: TOFRAW - raw
     time-of-flight data from a pulsed neutron source)

   - specification of input or output of a specific software program

   ..  The term *the sky is the limit* seems to apply.

   The point of the
   *NeXus Application Definition*
   is that all of these start with ``NX`` and all have
   been approved by the NIAC.

   Those NXDL specifications not yet approved by the NIAC fall into the category of
   *NeXus contributed definitions*
   for which NeXus has a place in the repository.
   Consider the NXDL files in the ``contributed`` directory
   as *in incubation*.
   This category is the place to put an NXDL (a
   candidate for a base class or application definition) for the NIAC to consider
   approving.
    